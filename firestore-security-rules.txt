# Firestore Security Rules for Production
# Copy these rules to your Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function hasRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function hasPermission(permission) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      let permissions = {
        'admin': ['read', 'write', 'delete', 'manage_users', 'manage_profiles', 'view_analytics'],
        'manager': ['read', 'write', 'delete', 'manage_profiles', 'view_analytics'],
        'user': ['read', 'write'],
        'guest': ['read']
      };
      return permissions[userRole] != null && permission in permissions[userRole];
    }
    
    // User profiles - users can read their own profile, admins can read all
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || hasRole('admin'));
      allow write: if isAuthenticated() && (isOwner(userId) || hasRole('admin'));
      allow create: if isAuthenticated() && hasRole('admin');
      allow delete: if isAuthenticated() && hasRole('admin');
    }
    
    // Quotes - users can only see their own quotes, managers/admins can see all
    match /quotes/{quoteId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.createdBy) || 
        hasRole('manager') || 
        hasRole('admin')
      );
      allow create: if isAuthenticated() && hasPermission('write');
      allow update: if isAuthenticated() && (
        isOwner(resource.data.createdBy) || 
        hasRole('manager') || 
        hasRole('admin')
      );
      allow delete: if isAuthenticated() && hasPermission('delete');
    }
    
    // Profiles - managers and admins can manage, all authenticated users can read
    match /profiles/{profileId} {
      allow read: if isAuthenticated() && hasPermission('read');
      allow create: if isAuthenticated() && hasPermission('manage_profiles');
      allow update: if isAuthenticated() && hasPermission('manage_profiles');
      allow delete: if isAuthenticated() && hasPermission('manage_profiles');
    }
    
    // Analytics - only managers and admins can access
    match /analytics/{docId} {
      allow read, write: if isAuthenticated() && hasPermission('view_analytics');
    }
    
    // System settings - only admins can access
    match /settings/{docId} {
      allow read, write: if isAuthenticated() && hasRole('admin');
    }
    
    // Audit logs - only admins can read
    match /audit_logs/{logId} {
      allow read: if isAuthenticated() && hasRole('admin');
      allow create: if isAuthenticated(); // All authenticated users can create logs
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
